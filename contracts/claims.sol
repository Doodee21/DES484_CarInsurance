// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "./payout.sol";
import "./RoleManagement.sol";
import "./PolicyManagement.sol";

contract CarInsuranceClaimSystem {

    RoleManagement roleManagement;
    PolicyManagement policyManagement;
    CarInsurancePayoutSystem carInsurancePayoutSystem;

    enum ClaimStatus { Pending, Approved, Rejected } // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á

    struct Claim {
        uint id; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        address claimant; // ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        string name; // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        string policy; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡πå
        string incidentDate; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏
        string details; // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        ClaimStatus status; // Pending, Approved, Rejected
        string[] cover; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô "Own Damage", "Theft", etc.)
        string[] ipfsHashes; // Array ‡∏Ç‡∏≠‡∏á IPFS Hash ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô
        uint timestamp; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    }

    mapping(uint => Claim) public claims; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    uint public claimCount; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    mapping(string => bool) public uploadedHashes; // ‡πÄ‡∏Å‡πá‡∏ö Hash ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß

    event ClaimSubmitted(uint claimId, address indexed claimant, string name, string policy);
    event ClaimRejected(uint claimId); // Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    event ClaimApproved(uint claimId); // Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥


    constructor(address _roleManagementAddress, address _policyManagementAddress, address _carInsurancePayoutSystemAddress) {
        roleManagement = RoleManagement(_roleManagementAddress);
        policyManagement = PolicyManagement(_policyManagementAddress);
        carInsurancePayoutSystem =  CarInsurancePayoutSystem(_carInsurancePayoutSystemAddress);
    }

    
    function submitClaim(
        string memory _name,
        string memory _policy,
        string memory _incidentDate,
        string memory _details,
        string[] memory _cover,
        string[] memory _ipfsHashes
    ) public {
        require(
            roleManagement._isInUsers(msg.sender),
            "Access denied: You are not Users"
        );
        require(bytes(_name).length > 0, "Name cannot be empty");
        require(bytes(_policy).length > 0, "Policy cannot be empty");
        require(_cover.length > 0, "Cover cannot be empty");
        require(_ipfsHashes.length > 0, "No IPFS hashes provided");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ Hash ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for (uint i = 0; i < _ipfsHashes.length; i++) {
            if (uploadedHashes[_ipfsHashes[i]]) {
                claimCount++;
                claims[claimCount] = Claim({
                    id: claimCount,
                    claimant: msg.sender,
                    name: _name,
                    policy: _policy,
                    incidentDate: _incidentDate,
                    details: _details,
                    status: ClaimStatus.Rejected, // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    cover: _cover,
                    ipfsHashes: _ipfsHashes,
                    timestamp: block.timestamp
                });

                emit ClaimRejected(claimCount);
                return;
            }
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ claimCount ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        claimCount++;
        ClaimStatus initialStatus = ClaimStatus.Pending; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "Own Damage" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Cover ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        for (uint i = 0; i < _cover.length; i++) {
            if (keccak256(abi.encodePacked(_cover[i])) == keccak256(abi.encodePacked("Own Damage"))) {
                initialStatus = ClaimStatus.Approved; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Approved
                emit ClaimApproved(claimCount); // ‡∏™‡πà‡∏á Event ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                carInsurancePayoutSystem.triggerPayout(claimCount, msg.sender); // üî• Trigger Payout
                break;
            }
        }


        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        claims[claimCount] = Claim({
            id: claimCount,
            claimant: msg.sender,
            name: _name,
            policy: _policy,
            incidentDate: _incidentDate,
            details: _details,
            status: initialStatus, // ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å initialStatus
            cover: _cover,
            ipfsHashes: _ipfsHashes,
            timestamp: block.timestamp
        });

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Hash ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        for (uint i = 0; i < _ipfsHashes.length; i++) {
            uploadedHashes[_ipfsHashes[i]] = true;
        }

        emit ClaimSubmitted(claimCount, msg.sender, _name, _policy);
    }

    function reviewClaim(
        uint _claimId,
        bool _approvedStatus
    ) public  {
        require(
            roleManagement._isInAdmins(msg.sender),
            "Access denied: You are not Admin"
        );
        Claim storage claim = claims[_claimId];
        require(claim.status == ClaimStatus.Pending, "Claim is not in pending state");

        if (_approvedStatus) {
            claim.status = ClaimStatus.Approved;
            emit ClaimApproved(_claimId);
            carInsurancePayoutSystem.triggerPayout(_claimId, claim.claimant); // Trigger Payout
        } else {
            claim.status = ClaimStatus.Rejected;
            emit ClaimRejected(_claimId);
        }
    }

 
    function viewClaimStatus(uint _claimId)
        public
        view
        returns (
            address claimant,
            string memory name,
            string memory policy,
            string memory incidentDate,
            string memory details,
            ClaimStatus status,
            string[] memory cover,
            string[] memory ipfsHashes,
            uint timestamp
        )
    {
        Claim memory claim = claims[_claimId];
        return (
            claim.claimant,
            claim.name,
            claim.policy,
            claim.incidentDate,
            claim.details,
            claim.status,
            claim.cover,
            claim.ipfsHashes,
            claim.timestamp
        );
    }
}